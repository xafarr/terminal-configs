# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Platform and architecture
system=$(uname -ms)
platform=$(echo "$system" | awk '{print $1}')
arch=$(echo "$system" | awk '{print $2}')

export HOMEBREW_PREFIX="/opt/homebrew";
export HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar";
export HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX";
export PATH="$HOMEBREW_PREFIX/bin:$HOMEBREW_PREFIX/sbin${PATH+:$PATH}";
export MANPATH="$HOMEBREW_PREFIX/share/man${MANPATH+:$MANPATH}:";
export INFOPATH="$HOMEBREW_PREFIX/share/info:${INFOPATH:-}";
export PATH=$HOMEBREW_PREFIX/opt/ncurses/bin:$PATH
export PATH=$HOMEBREW_PREFIX/opt/apr/bin:$PATH
export PATH=$HOMEBREW_PREFIX/opt/apr-util/bin:$PATH
export PATH=$HOMEBREW_PREFIX/opt/go/libexec/bin:$PATH
export GOPATH=$HOME/Documents/Go
export PATH="$HOME/.cargo/bin:$PATH"
export PATH=$HOMEBREW_PREFIX/opt/gettext/bin:$PATH
export PATH="$(brew --prefix bzip2)/bin:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$(brew --prefix nvm)/nvm.sh" ] && . "$(brew --prefix nvm)/nvm.sh"  # This loads nvm
[ -s "$(brew --prefix nvm)/etc/bash_completion" ] && . "$(brew --prefix nvm)/etc/bash_completion"  # This loads nvm bash_completion

# Dotnet root (.NET Core)
export DOTNET_ROOT="$(brew --prefix dotnet)/libexec"

# Ensure LESS doesn't wrap long lines
export LESS="--MOUSE -rR"
export LS_COLORS="rs=0:no=00:mi=00:mh=00:ln=01;36:or=01;31:di=01;34:ow=04;01;34:st=34:tw=04;34:pi=01;33:so=01;33:do=01;33:bd=01;33:cd=01;33:su=01;35:sg=01;35:ca=01;35:ex=01;32:"

# Pyenv path
export PYENV_ROOT=$HOME/.pyenv
export PATH=$PYENV_ROOT/bin:$PATH
eval "$(pyenv init -)"
export PYTHON_CONFIGURE_OPTS="--enable-framework"

# virtualenvwrapper
export WORKON_HOME=$HOME/.local/share/virtualenvs

export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=$HOMEBREW_PREFIX/share/zsh-syntax-highlighting/highlighters

###################################################
# FZF Settings
###################################################
export FZF_BASE="$HOMEBREW_PREFIX/opt/fzf"
FD_OPTIONS="--follow --hidden --exclude .git --exclude node_modules"
# Use ripgrep to find files
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --smart-case --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type d $FD_OPTIONS"
export FZF_DEFAULT_OPTS="--no-mouse --height 80% --layout=reverse --border --multi --inline-info --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2> /dev/null | head -500' --preview-window='right:hidden:nowrap' --bind='f3:execute(bat --style=numbers {} || less -f {}),f2:toggle-preview,ctrl-d:preview-half-page-down,ctrl-u:preview-half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echo {+} | pbcopy)'"
export PS_FORMAT="pid,ppid,user,pri,ni,vsz,rss,pcpu,pmem,tty,stat,args"

#--------------------------------------------------
# zsh-completions settings
#--------------------------------------------------
autoload -Uz compinit
compinit

ZSH_TMUX_AUTOSTART=false
ZSH_TMUX_AUTOQUIT=false

ZSH_DISABLE_COMPFIX=true
zstyle :omz:plugins:ssh-agent agent-forwarding on
zstyle :omz:plugins:ssh-agent identities id_rsa
# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

#--------------------------------------------------
# ZSH Theme
#--------------------------------------------------
ZSH_THEME="powerlevel10k/powerlevel10k"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# Forgit is a custom plugin
plugins=(docker forgit docker-compose autoupdate)

source $ZSH/oh-my-zsh.sh

# User configuration

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Preferred editor for local and remote sessions
export VISUAL=vim
export EDITOR=$VISUAL

# Compilation flags
export ARCHFLAGS="-arch $(arch)"

# ssh
export SSH_KEY_PATH="~/.ssh/rsa_id"

# CPPFLAGS and LDFLAGS
export SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
export CPPFLAGS="-I$(brew --prefix gettext)/include -I$(brew --prefix openssl)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix readline)/include -I$(brew --prefix zlib)/include -I$(xcrun --show-sdk-path)/usr/include"
export LDFLAGS="-L$(brew --prefix gettext)/lib -L$(brew --prefix openssl)/lib -L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib -L$(brew --prefix readline)/lib -L$HOMEBREW_PREFIX/lib"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias ltr="ll -altr"
alias grep="grep -i --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,node_modules,.yarn}"
# Use MacVim vim and enable ctrl-s in terminal
alias vim="nvim"
alias ssh-keygen="ssh-keygen -m PEM"
alias brew-update="brew update; brew doctor; brew upgrade; brew upgrade --cask; brew cleanup"
alias wiki="vim -c VimwikiIndex"
# To avoid warnings in brew doctor
alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'
# alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
# alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'

# use gui version of vim if available
#if command -v mvim &> /dev/null
#then
#    alias vim="mvim"
#fi
## use gui version of vimdiff if available
#if command -v mvim &> /dev/null
#then
#    alias vimdiff="mvimdiff"
#fi

# For Z for completion
. `brew --prefix`/etc/profile.d/z.sh

# For Syntax Highlighting
source $HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# For Auto Suggestions
source $HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# For Ruby environment initialization
eval "$(rbenv init -)"

# Installs Shell Integration for iTerm2.
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# -------------------------------------------------------------------
# Functions for convenience
# -------------------------------------------------------------------
function java_props() {
    echo $(java -XshowSettings:properties -version)
}

# -------------------------------------------------------------------
# Function to check if port is used
# -------------------------------------------------------------------
function port() {
    lsof -n -i4TCP:$1 | grep LISTEN
}

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# For oraganization specific extra configuration
if [ -f ~/.additional-env-config ]; then
    source $HOME/.additional-env-config
fi

# Virtualenvwrapper script
source $(brew --prefix virtualenvwrapper)/bin/virtualenvwrapper.sh

#--------------------------------------------------
# Vault autocompletion configuration
#--------------------------------------------------
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C $(brew --prefix vault)/bin/vault vault


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
