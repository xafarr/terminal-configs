set nocompatible
syntax on
set encoding=utf8
filetype off

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'airblade/vim-gitgutter'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'
Plug 'editorconfig/editorconfig-vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'pearofducks/ansible-vim'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'vim-airline/vim-airline'
Plug 'ycm-core/YouCompleteMe', { 'do': 'python3 install.py --all' }
Plug 'christoomey/vim-tmux-navigator'
" --------------------------------------------------
" Plugins for file types
" --------------------------------------------------
Plug 'rust-lang/rust.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
" --------------------------------------------------
" Color Schemes
" --------------------------------------------------
Plug 'sonph/onehalf', {'rtp': 'vim/'}
Plug 'NLKNguyen/papercolor-theme'
Plug 'morhetz/gruvbox'
Plug 'lifepillar/vim-solarized8'
Plug 'vim-airline/vim-airline-themes'

" All of your Plugins must be added before the following line
call plug#end()

filetype plugin indent on
if !has('gui_running')
  set t_Co=256
endif

" True colors support (need vim to be compiled with +termguicolors)
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Automatically reloading of .vimrc
autocmd! bufwritepost $MYVIMRC source $MYVIMRC

"--------------------------------------------------
" Color Scheme
"--------------------------------------------------
" let g:gruvbox_italic=1
" let g:gruvbox_contrast_dark='medium'
set background=light
colorscheme solarized8_high

" -----------------------------------------------------------------------------
" Status line
" -----------------------------------------------------------------------------
" Enable extensions
" let g:airline_extensions= ['branch', 'fzf', 'ycm', 'tabline', 'nerdtree']
" Enable tabline extension
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
" Update section z to just have line number/total lines:column
let g:airline_section_z = airline#section#create(['linenr', '/%1L', ':%1v'])
" Do not draw separators for empty sections (only for the active window) >
let g:airline_skip_empty_sections = 1
" Custom setup that removes filetype/whitespace from default vim airline bar
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'z', 'warning', 'error']]
" Customize vim airline per filetype
let g:airline_filetype_overrides = {
      \ 'coc-explorer':  [ 'CoC Explorer', '' ],
      \ 'defx':  ['defx', '%{b:defx.paths[0]}'],
      \ 'fugitive': ['fugitive', '%{airline#util#wrap(airline#extensions#branch#get_head(),80)}'],
      \ 'gundo': [ 'Gundo', '' ],
      \ 'help':  [ 'Help', '%f' ],
      \ 'minibufexpl': [ 'MiniBufExplorer', '' ],
      \ 'nerdtree': [ get(g:, 'NERDTreeStatusline', 'NERD'), '' ],
      \ 'startify': [ 'startify', '' ],
      \ 'vim-plug': [ 'Plugins', '' ],
      \ 'vimfiler': [ 'vimfiler', '%{vimfiler#get_status_string()}' ],
      \ 'vimshell': ['vimshell','%{vimshell#get_status_string()}'],
      \ 'vaffle' : [ 'Vaffle', '%{b:vaffle.dir}' ],
      \ }
" Enable powerline fonts
let g:airline_powerline_fonts = 1
" Enable caching of syntax highlighting groups
let g:airline_highlighting_cache = 1
" enable/disable showing a summary of changed hunks under source control. >
let g:airline#extensions#hunks#enabled = 0
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
" set error count prefix >
let g:airline#extensions#ycm#error_symbol = 'E:'
" set warning count prefix >
let g:airline#extensions#ycm#warning_symbol = 'W:'
" Vim airline theme
let g:airline_theme='solarized'

"-----------------------------------
" General settings
"-----------------------------------
"Set Leader key to comma (,)
let mapleader = ","
" Leader is comma
let maplocalleader = ","
" Set vim settings
" Integrate with system clipboard
set clipboard=unnamed,unnamedplus
" Keeps the cursor 5 lines above/below when z <cr>
set scrolloff=5
" Show incomplete command in status line
set showcmd
set noshowmode
set laststatus=2
"Set to auto read when a file is changed from the outside
set autoread
"buffers are automatically saved when switching to another buffer
set autowrite
set wrap
" Use % to jump between pairs
set matchpairs+=<:>
"command bar is 2 high
set cmdheight=2
"set backspace function
set backspace=indent,eol,start
" Set searching options
" set hlsearch "highlight searched things
"incremental search
set incsearch
"ignore case
set ignorecase
"ignore ignorecase if search pattern contains uppercase
set smartcase

set nolazyredraw
set magic
set textwidth=80
set formatoptions-=t
"show current position
set ruler
set number relativenumber
"show maching braces
set showmatch
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab smarttab
set smartindent
set autoindent
set cursorline
set listchars=eol:¬
set showbreak=\
set wildmode=list:longest,full
" Shows menu when using tab completion
set wildmenu
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set splitbelow
set splitright
set hidden
set noerrorbells visualbell t_vb=
set complete+=kspell
set completeopt=menuone,longest
set shortmess+=c
set spelllang=en_us

set guifont=MesloLGS-NF-Regular:h15

" Setting the grep program to ripgrep
set grepprg=rg\ --vimgrep
set grepformat^=%f:%l:%c:%m

" Open new line below and above current line
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>

" Force saving files that require root permission
cmap w!! w !sudo tee > /dev/null %

" easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

" trim whitespace
" nnoremap <silent> <Leader>t :%s/\s\+$//e<cr>

" toggle wrapping
" nnoremap <silent> <Leader>tw :set wrap! wrap?<cr>
" toggle relative line number
" nnoremap <silent> <Leader>rn :set rnu!<cr>
" search occurrence count in file
nnoremap <Leader>* *<C-O>:%s///gn<CR>``
" toggle hlsearch
nnoremap <silent> <Leader><space> :set hls!<cr>

" Search for selected text, forwards or backwards.
" https://vim.fandom.com/wiki/Search_for_visually_selected_text
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gVzv:call setreg('"', old_reg, old_regtype)<CR>

" --- backup and swap files ---
set nobackup
set nowritebackup
set noswapfile

" toggle list (special chars)
" nnoremap <Leader>l :set list! list?<cr>

" Type a replacement term and press . to repeat the replacement again. Useful
" for replacing a few instances of the term (comparable to multiple cursors).
nnoremap <silent> s* :let @/='\<'.expand('<cword>').'\>'<CR>cgn
xnoremap <silent> s* "sy:let @/=@s<CR>cgn

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" faster redrawing
set ttyfast

" Clear search
nnoremap <silent> <Leader>, :let @/=''<cr>:noh<cr>

" Prettier mapping
nmap <D-¬> <Plug>(PrettierAsync)

" Split horizontally with new file
nnoremap <silent> <Leader>h :split<CR>
nnoremap <silent> <Leader>v :vsplit<CR>
nnoremap <silent> <Leader>w :close<CR>

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
" Select whole file
map <C-a> <esc>ggVG<CR>

" Make Y behave like other capitals
nnoremap Y y$

" Prevent x from overriding what's in the clipboard.
noremap x "_x
noremap X "_x

map - <C-w>-
map + <C-w>+

" Circular windows navigation
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W

" Rotate split windows
nnoremap <Leader><C-h> <C-w>H
nnoremap <Leader><C-j> <C-w>J
nnoremap <Leader><C-k> <C-w>K
nnoremap <Leader><C-l> <C-w>L

" Move between splits (windows)
"nnoremap <C-h> <C-w>h
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-l> <C-w>l

" Tmux Navigator mappings
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

" Movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k

" move line up and down
" nnoremap <S-Up>   :<C-u>silent! move-2<CR>==
" nnoremap <S-Down> :<C-u>silent! move+<CR>==
" Alt-j <A-j> mapped to ∆
" Alt-k <A-k> mapped to ˚
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" --------------------------------------------
" YouCompleteMe settings
" --------------------------------------------
let g:ycm_python_interpreter_path = 'python3'
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_warning_symbol = '⚠'
let g:ycm_error_symbol = '>>'
nnoremap <D-b> :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <D-∫> :YcmCompleter GoToImplementation<CR>
nmap <F1> <plug>(YCMHover)

" --------------------------------------------
" NERDTree settings
" --------------------------------------------
nnoremap <leader>e :NERDTreeToggle<CR>

let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeShowHidden=1
" Remove bookmarks and help text from NERDTree
let g:NERDTreeMinimalUI = 1

" If you are using vim-plug, you'll also need to add these lines to avoid crashes
" when calling vim-plug functions while the cursor is on the NERDTree window:
let g:plug_window = 'noautocmd vertical topleft new'

" Start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif

" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

"--------------------------------------------------
" NerdTree GIT Plugin
"--------------------------------------------------
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Ignored"   : "☒",
    \ "Unknown"   : "?"
    \ }
let g:NERDTreeGitStatusShowIgnored = 1

" --------------------------------------------------
" FZF settings
" This is the default extra key bindings
" --------------------------------------------------
nnoremap <silent> <C-f> :FZF<cr>
nnoremap <silent> <Leader><C-f> :FZF ~<cr>
nnoremap <silent> <C-g> :Rg<cr>
nnoremap <silent> <C-b> :Buffers<cr>
nnoremap <silent> <Leader>l :Lines<CR>

let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-h': 'split',
      \ 'ctrl-v': 'vsplit',
      \ 'ctrl-y': {lines -> setreg('*', join(lines, "\n"))}}

" Customize fzf colors to match your color scheme
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" AUTOCOMMANDS - Do stuff
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!node_modules/*" --glob "!target/*" --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Save whenever switching windows or leaving vim. This is useful when running
" the tests inside vim without having to save all files first.
au FocusLost,WinLeave * :silent! wa

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" set up path to editorconfig
let g:EditorConfig_exec_path = findfile('.editorconfig', '.;')

" set Jenkinsfile identified as Groovy syntax
au BufNewFile,BufRead Jenkinsfile setf groovy

