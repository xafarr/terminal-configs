set nocompatible
syntax on
set encoding=utf8
filetype off

" If installed using Homebrew
set rtp+=/usr/local/opt/fzf

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-fugitive'
Plug 'NLKNguyen/papercolor-theme'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'ryanoasis/vim-devicons'
Plug 'airblade/vim-gitgutter'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'ervandew/supertab'
" Reads any .editorconfig files and sets spacing etc automatically
Plug 'editorconfig/editorconfig-vim'
" All of your Plugins must be added before the following line
call plug#end()

filetype plugin indent on
set t_Co=256
set background=light
colorscheme PaperColor

let mapleader = "," "Set leader key to comma (,)
set clipboard=unnamed,unnamedplus
set noshowmode
set laststatus=2
set autoread "Set to auto read when a file is changed from the outside
set autowrite
set wrap
set cmdheight=2 "command bar is 2 high
set backspace=indent,eol,start "set backspace function
set gdefault  " Never have to type /g at the end of search / replace again
set hlsearch "highlight searched things
set incsearch "incremental search
set ignorecase "ignore case
set smartcase
set nolazyredraw
set magic
set textwidth=80
set ruler "show current position
set number relativenumber
set showmatch "show maching braces
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set smartindent
set autoindent
set cursorline
set listchars=eol:¬
set showbreak=\
set wildmode=list:longest,full
set wildmenu
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set splitbelow
set splitright

"Use enter to create new lines w/o entering insert mode
"nnoremap <CR> o<Esc>

"Below is to fix issues with the ABOVE mappings in quickfix window
autocmd CmdwinEnter * nnoremap <CR> <CR>
autocmd BufReadPost quickfix nnoremap <CR> <CR>

"Map Ctrl + S to save in any mode
noremap <silent> <c-s>          :w<CR>
vnoremap <silent> <c-s>         <ESC>:w<CR>
inoremap <silent> <c-s>         <Esc>:w<CR>l

" trim whitespace
nnoremap <silent> <leader>t :%s/\s\+$//e<cr>
" toggle wrapping
nnoremap <leader>tw :set wrap! wrap?<cr>

" --- backup and swap files ---
set nobackup
set nowritebackup
set noswapfile

" toggle list (special chars)
nnoremap <leader>l :set list! list?<cr>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" faster redrawing
set ttyfast

" Clear search
nnoremap <leader>, :let @/=''<cr>:noh<cr>

" Reformat code
nnoremap <leader>rf gg=G``<cr>

" Split horizontally with new file
nnoremap <silent> <leader>d :split<CR>
nnoremap <silent> <leader>D :vsplit<CR>
nnoremap <silent> <leader>w :close<CR>

" Faster scrolling
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>
" Context and programming language aware omni-completion
inoremap <C-Space> <C-x><C-o>
" Select whole file
map <C-a> <esc>ggVG<CR>
" Format JSON
map <leader>fj :%!python -m json.tool<CR>
" Format XML
map <leader>fx :%!xmllint % --format<CR>

" Move between splits (windows)
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" move line up and down
nnoremap <S-Up>   :<C-u>silent! move-2<CR>==
nnoremap <S-Down> :<C-u>silent! move+<CR>==

" Airline theme
let g:airline_theme='powerlineish'
let g:airline_powerline_fonts = 1

" NERDTree settings
map <C-n> :NERDTreeToggle<CR>
"Reveal file in NerdTree
map <Leader>R :NERDTreeFind<cr>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" Close vim if only NERDTree is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeShowHidden=1
" Dev Icons settings
" enable folder/directory glyph flag (disabled by default with 0)
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" enable file extension pattern matching glyphs on folder/directory (disabled by default with 0)
let g:DevIconsEnableFolderExtensionPatternMatching = 1

" FZF settings
" This is the default extra key bindings
nnoremap <silent> <leader>f :FZF<cr>
nnoremap <silent> <leader>F :FZF ~<cr>
let g:fzf_action = {
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" AUTOCOMMANDS - Do stuff

" Save whenever switching windows or leaving vim. This is useful when running
" the tests inside vim without having to save all files first.
au FocusLost,WinLeave * :silent! wa

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

"set up path to editorconfig
let g:EditorConfig_exec_path = findfile('.editorconfig', '.;')
